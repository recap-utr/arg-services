syntax = "proto3";

package arg_services.cbr.v1beta;

import "arg_services/cbr/v1beta/model.proto";
import "arg_services/nlp/v1/nlp.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service RetrievalService {
  rpc Retrieve(RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      post: "/cbr/v1/retrieve"
      body: "*"
    };
  }
  rpc Similarities(SimilaritiesRequest) returns (SimilaritiesResponse) {
    option (google.api.http) = {
      post: "/cbr/v1/similarities"
      body: "*"
    };
  }
}

message RetrieveRequest {
  CasebaseFilter casebase_filter = 1;
  map<string, AnnotatedGraph> cases = 2;
  map<string, AnnotatedGraph> queries = 3;
  arg_services.nlp.v1.NlpConfig nlp_config = 5;
  int32 limit = 6;
  bool semantic_retrieval = 7;
  bool structural_retrieval = 8;
  MappingAlgorithm mapping_algorithm = 9;
  int32 mapping_algorithm_variant = 10;
  SchemeHandling scheme_handling = 11;
  // Implementation-specific information can be encoded here
  google.protobuf.Struct extras = 15;
}

message RetrieveResponse {
  map<string, QueryResponse> query_responses = 1;
  google.protobuf.Struct extras = 15;
}

message QueryResponse {
  repeated RetrievedCase semantic_ranking = 1;
  repeated RetrievedCase structural_ranking = 2;
  repeated RetrievedMapping structural_mapping = 3;
}

enum MappingAlgorithm {
  MAPPING_ALGORITHM_UNSPECIFIED = 0;
  MAPPING_ALGORITHM_ASTAR = 1;
  MAPPING_ALGORITHM_GREEDY = 2;
  MAPPING_ALGORITHM_ISOMORPHISM = 3;
  MAPPING_ALGORITHM_HUNGARIAN = 4;
  MAPPING_ALGORITHM_BRUTE_FORCE = 5;
  MAPPING_ALGORITHM_EDIT_PATHS = 6;
}

enum SchemeHandling {
  SCHEME_HANDLING_UNSPECIFIED = 0;
  SCHEME_HANDLING_BINARY = 1;
  SCHEME_HANDLING_TAXONOMY = 2;
  SCHEME_HANDLING_EXACT = 3;
}

message RetrievedCase {
  string id = 1;
  double similarity = 2;
  AnnotatedGraph graph = 3;
}

message RetrievedMapping {
  string id = 1;
  repeated MappedElement node_mappings = 2;
  repeated MappedElement edge_mappings = 2;
}

message MappedElement {
  string query_id = 1;
  string case_id = 2;
  double similarity = 3;
}

message SimilaritiesRequest {
  repeated AnnotatedGraph cases = 2;
  AnnotatedGraph query = 3;
  arg_services.nlp.v1.NlpConfig nlp_config = 5;
  bool structural = 7;
  MappingAlgorithm mapping_algorithm = 9;
  int32 mapping_algorithm_variant = 10;
  SchemeHandling scheme_handling = 11;
  google.protobuf.Struct extras = 15;
}

message SimilaritiesResponse {
  repeated SimilarityResponse similarities = 1;
  google.protobuf.Struct extras = 15;
}

message SimilarityResponse {
  double similarity = 1;
  RetrievedMapping mapping = 3;
}
