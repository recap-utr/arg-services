syntax = "proto3";

package arg_services.cbr.v1beta;

import "arg_services/cbr/v1beta/model.proto";
import "arg_services/cbr/v1beta/retrieval.proto";
import "arg_services/nlp/v1/nlp.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service AdaptationService {
  rpc Adapt(AdaptRequest) returns (AdaptResponse) {
    option (google.api.http) = {
      post: "/cbr/v1beta/adapt"
      body: "*"
    };
  }
}

message AdaptRequest {
  map<string, AdaptedCaseRequest> cases = 2;
  AnnotatedGraph query = 3;
  arg_services.nlp.v1.NlpConfig nlp_config = 5;
  Direction direction = 6;
  // Implementation-specific information can be encoded here
  google.protobuf.Struct extras = 15;
}

message AdaptResponse {
  map<string, AdaptedCaseResponse> cases = 1;
  google.protobuf.Struct extras = 15;
}

message AdaptedCaseRequest {
  AnnotatedGraph case = 1;
  repeated Rule rules = 2;
  optional RetrievedMapping mapping = 3;
}

message AdaptedCaseResponse {
  AnnotatedGraph case = 1;
  // These are optional and used for further evaluation only
  repeated Concept extracted_concepts = 2;
  repeated Concept discarded_concepts = 3;
  repeated Rule applied_rules = 4;
  repeated Rule discarded_rules = 5;
  repeated Rule generated_rules = 7;
  repeated RuleCandidates rule_candidates = 6;
  // repeated Path extracted_paths = 6;
  // repeated Path adapted_paths = 7;
}

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_GENERALIZATION = 1;
  DIRECTION_SPECIALIZATION = 2;
  DIRECTION_COMBINED = 3;
}

message Rule {
  Concept source = 1;
  Concept target = 2;
}

message Concept {
  string lemma = 1;
  Pos pos = 2;
  double score = 3;
}

enum Pos {
  POS_UNSPECIFIED = 0;
  POS_NOUN = 1;
  POS_VERB = 2;
  POS_ADJECTIVE = 3;
  POS_ADVERB = 4;
}

message RuleCandidates {
  Concept source = 1;
  repeated Concept target = 2;
}
